name: cd
on:
  workflow_dispatch:
  push:
    branches:
      - "main"
    paths:
      - "terraform/**"
  release:
    types: ["published"]

concurrency:
  # Only allow for one action to run at once, queue any others
  group: cd
  # Don't cancel existing
  cancel-in-progress: false

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.clean_version.outputs.version }}
    steps:
      - name: Get latest release
        id: latest_release
        uses: pozetroninc/github-action-get-latest-release@master
        if: github.event_name != 'release'
        with:
          repository: ${{ github.repository }}
          excludes: draft

      - name: Get release value
        id: get
        uses: actions/github-script@v6
        env:
          LATEST_TAG: ${{ steps.latest_release.outputs.release }}
        with:
          result-encoding: string
          script: |
            if (context.eventName == "release") {
              return context.payload.release.tag_name
            } else {
              return process.env.LATEST_TAG
            }

      - name: Clean version
        id: clean_version
        run: |
          version=$(echo "${{ steps.get.outputs.result }}" | sed 's/v//g')
          echo "version=$version" >> $GITHUB_OUTPUT

  deploy-infra-staging:
    runs-on: ubuntu-latest
    environment:
      name: infra/staging
      url: https://staging.cast.walletconnect.com/health
    needs:
      - get-version
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Get Grafana details
        id: grafana-get-details
        uses: WalletConnect/actions/aws/grafana/get-details/@1.0.0

      - name: Get Grafana key
        id: grafana-get-key
        uses: WalletConnect/actions/aws/grafana/get-key/@1.0.0
        with:
          key-prefix: ${{ github.event.repository.name }}
          workspace-id: ${{ steps.grafana-get-details.outputs.workspace-id }}

      - name: Init Terraform 
        id: tf-init
        uses: WalletConnect/actions/terraform/init/@1.0.0
        with:
          environment: staging

      - name: Deploy Terraform to staging
        id: tf-apply-staging
        uses: WalletConnect/actions/terraform/apply/@1.0.0
        env:
          GRAFANA_AUTH: ${{ steps.get-grafana-key.outputs.key }}
          TF_VAR_grafana_endpoint: ${{ steps.get-grafana-details.outputs.endpoint }}
          TF_VAR_image_version: ${{ needs.get-version.outputs.version }}
        with:
          environment: staging

      - name: Delete Grafana key
        id: grafana-delete-key
        uses: WalletConnect/actions/aws/grafana/delete-key/@1.0.0
        if: ${{ success() || failure() || cancelled() }} # don't use always() since it creates non-cancellable jobs
        with:
          key-name: ${{ steps.grafana-get-key.outputs.key-name }}
          workspace-id: ${{ steps.grafana-get-details.outputs.workspace-id }}

  validate-staging:
    needs: [deploy-infra-staging]
    uses: ./.github/workflows/validate.yml
    with:
      environment: 'staging'

  # deploy-infra-prod:
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: infra/prod
  #     url: https://cast.walletconnect.com/health
  #   needs:
  #     - get-version
  #     - validate-staging
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - id: deploy-staging
  #       uses: WalletConnect/actions/actions/deploy-terraform/@master
  #       env:
  #         TF_VAR_image_version: ${{ needs.get-version.outputs.version }}
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-central-1
  #         environment: prod
  #         app-name: ${{ github.event.repository.name }}
